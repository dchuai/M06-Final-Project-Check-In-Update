{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cb507749",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "User authentication successful.\n",
      "Order 1 processed successfully.\n",
      "Notifying customer about Order 1\n",
      "Alert: Low stock for Cake. Quantity: 0\n"
     ]
    }
   ],
   "source": [
    "from typing import List\n",
    "\n",
    "class User:\n",
    "    def __init__(self, username: str, password: str):\n",
    "        self.username = username\n",
    "        self.password = password\n",
    "\n",
    "class InventoryItem:\n",
    "    def __init__(self, name: str, quantity: int, price: float):\n",
    "        self.name = name\n",
    "        self.quantity = quantity\n",
    "        self.price = price\n",
    "\n",
    "class Alert:\n",
    "    def __init__(self, message: str):\n",
    "        self.message = message\n",
    "\n",
    "class Order:\n",
    "    def __init__(self, order_id: int, items: List[InventoryItem]):\n",
    "        self.order_id = order_id\n",
    "        self.items = items\n",
    "\n",
    "class UserManager:\n",
    "    def __init__(self):\n",
    "        self.users = {}\n",
    "\n",
    "    def authenticate(self, username: str, password: str) -> bool:\n",
    "        user = self.users.get(username)\n",
    "        return user and user.password == password\n",
    "\n",
    "    def create_user(self, username: str, password: str):\n",
    "        self.users[username] = User(username, password)\n",
    "\n",
    "    def get_user(self, username: str) -> User:\n",
    "        return self.users.get(username)\n",
    "\n",
    "class InventoryManager:\n",
    "    def __init__(self):\n",
    "        self.inventory = []\n",
    "        self.alerts = []\n",
    "\n",
    "    def update_inventory(self, order: Order):\n",
    "        for item in order.items:\n",
    "            inventory_item = next((i for i in self.inventory if i.name == item.name), None)\n",
    "            if inventory_item:\n",
    "                inventory_item.quantity -= item.quantity\n",
    "\n",
    "                if inventory_item.quantity < 5:\n",
    "                    alert_message = f\"Low stock for {inventory_item.name}. Quantity: {inventory_item.quantity}\"\n",
    "                    alert = Alert(alert_message)\n",
    "                    self.alerts.append(alert)\n",
    "\n",
    "    def send_alerts(self):\n",
    "        for alert in self.alerts:\n",
    "            print(f\"Alert: {alert.message}\")\n",
    "\n",
    "class OrderManager:\n",
    "    def __init__(self):\n",
    "        self.orders = []\n",
    "\n",
    "    def process_order(self, order: Order):\n",
    "        self.orders.append(order)\n",
    "        print(f\"Order {order.order_id} processed successfully.\")\n",
    "\n",
    "    def notify_customer(self, order: Order):\n",
    "        print(f\"Notifying customer about Order {order.order_id}\")\n",
    "\n",
    "    def start(self):\n",
    "        user_manager = UserManager()\n",
    "        inventory_manager = InventoryManager()\n",
    "        order_manager = OrderManager()\n",
    "\n",
    "        # The process of operation\n",
    "        user_manager.create_user(\"john_doe\", \"password123\")\n",
    "        user_manager.create_user(\"jane_doe\", \"securepass\")\n",
    "\n",
    "        user_authenticated = user_manager.authenticate(\"john_doe\", \"password123\")\n",
    "        if user_authenticated:\n",
    "            print(\"User authentication successful.\")\n",
    "        else:\n",
    "            print(\"User authentication failed.\")\n",
    "\n",
    "        inventory_item1 = InventoryItem(\"Cake\", 10, 20.0)\n",
    "        inventory_item2 = InventoryItem(\"Bread\", 15, 5.0)\n",
    "        inventory_manager.inventory.extend([inventory_item1, inventory_item2])\n",
    "\n",
    "        order1 = Order(1, [inventory_item1])\n",
    "        order_manager.process_order(order1)\n",
    "        order_manager.notify_customer(order1)\n",
    "        inventory_manager.update_inventory(order1)\n",
    "        inventory_manager.send_alerts()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    bakery_system = OrderManager()\n",
    "    bakery_system.start()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d11186c3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
